--- # This playbook will install windows updates of Security and Critical categories

#The following command should be run to install the updates

# ansible-playbook win-critsec.yml --ask-vault-pass --extra-vars "group=<group_name>"

- hosts: '{{ group }}'
  gather_facts: no
  tasks:
    - name: Verify the Windows Update Service is running
      win_service:
        name: wuauserv
        state: started
      register: service_info

    - name: Find all Critical and Security updates.
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
        state: searched
        log_path: c:\ansible_wui_list.txt
      register: found_updates
      tags: find_updates

    - name: Display (Critical and Security) updates.
      debug:
        msg: "{{ inventory_hostname }} has {{ found_updates.found_update_count }} updates available."

    - name: Make a decision if you want  to continue with windows patches being install on the machines.
      pause:
          prompt: "Do you want to install and reboot, if needed? Enter 'Y' to continue."
      register: result
    - name: Exit if anything other than Y
      meta: end_play
      when: result.user_input != "Y"

    - name: Notify any logged-in users
      win_msg:
        delay_seconds: 60
        msg: "Automated update is about to start.  You have 60 seconds to save your work and log off."
      when: found_updates.reboot_required != false

    - name: Install (all) the updates.
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
        state: installed
        log_path: c:\ansible_wui_installed.txt
      register: check_finish
      tags: installed_updates

    - name: Check on reboot requirement.
      debug:
        msg: "{{ inventory_hostname }} has installed {{ check_finish.installed_update_count }} updates."
      when: check_finish.installed_update_count > 0

    - name: Reboot if needed.
      win_reboot:
        pre_reboot_delay_sec: 10
        msg: "Rebooted to apply Windows updates."
      when: check_finish.reboot_required != false
      register: reboot
      notify: Slack Ansible Channel Reboot
      tags: reboot

  handlers:

    - name: Slack Ansible Channel Reboot
      listen: "Slack Ansible Channel Reboot"
      slack:
        token: "{{ slack_token }}"
        channel: #ansible
        domain: "gannettdigital.slack.com"
        username: "Enterprise-Ansible"
        icon_url: "{{ slack_icon_url }}"
        msg: "NOTICE: Updates to {{ inventory_hostname }} required a reboot."
        color: good
      delegate_to: localhost

